@inject DataTypes TypesStorage;

<div class="d-flex">
	<div class="btn-group" role="group">
		@foreach (var type in DataTypes)
		{
			<button class="btn @IsSelectedDataType(type)"
				@onclick=@(async () => await SelectType(type) )>
				@type
			</button>
		}

		@if (!IsOpenAddType)
		{
			<button class="btn btn-secondary" @onclick="OpenAddType">+</button>
		}
	</div>
	@if (IsOpenAddType)
	{
		<div class="ms-lg-1">
			<input type="text" @bind="DataType" />
			<button class="btn btn-secondary" @onclick="AddType">Add</button>
		</div>
	}
</div>

@code {
	private string? DataType { get; set; }

	private List<string> DataTypes { get; set; }

	private bool IsOpenAddType { get; set; }

	private string? SelectedDataType { get; set; }

	[Parameter]
	public EventCallback<string?> SelectedDataTypeChanged { get; set; }

	protected override void OnInitialized()
	{
		DataTypes = TypesStorage.Types.ToList();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (DataTypes.Count == 1)
			SelectedDataType = DataTypes[0];
	}

	private async Task AddType()
	{
		var dataType = DataType;
		if (dataType is not { Length: > 0 }) return;
		if (!TypesStorage.Add(dataType)) return;
		DataTypes.Add(dataType);
		IsOpenAddType = false;
		await SelectType(dataType);
		StateHasChanged();
	}

	private string IsSelectedDataType(string type)
	{
		return type == SelectedDataType ? "btn-primary" : "btn-secondary";
	}

	private async Task SelectType(string? type)
	{
		SelectedDataType = type;
		await SelectedDataTypeChanged.InvokeAsync(type);
	}

	private void OpenAddType()
	{
		IsOpenAddType = true;
		StateHasChanged();
	}
}
